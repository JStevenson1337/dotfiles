[[/img/sc_logo.png]]

[[/][Home]] [[/guides/][Guides]] [[/courses/][Courses]] [[/news/][News]]
[[/community/][Community]]
[[https://store.systemcrafters.net?utm_source=sc-site-nav][Store]]
[[/how-to-help/][How to Help]]

* Types, Conditionals, and Loops in Emacs Lisp
  :PROPERTIES:
  :CUSTOM_ID: types-conditionals-and-loops-in-emacs-lisp
  :CLASS: site-post-title
  :END:

<<content>>

** [[#what-will-we-cover][¶]]What will we cover?
   :PROPERTIES:
   :CUSTOM_ID: what-will-we-cover
   :END:

<<text-orgab992a2>>
We'll get a sense for the basic data types of the language and how we
can use them!

- True and false
- Numbers
- Characters
- Sequences
- Strings
- Lists
- Arrays
- Combining expressions with logic operators
- Conditional logic
- Loops

#+ATTR_HTML: :class cta
#+BEGIN_center
If you find this guide helpful, please consider supporting System
Crafters via the links on the [[/how-to-help/#support-my-work][How to
Help]] page!
#+END_center

** [[#follow-along-with-ielm][¶]]Follow along with IELM!
   :PROPERTIES:
   :CUSTOM_ID: follow-along-with-ielm
   :END:

<<text-org95bb53e>>
You can open up an interactive Emacs Lisp REPL in Emacs by running
=M-x ielm.=

I'll be using the following snippet for evaluating code in the REPL:

#+BEGIN_EXAMPLE
  (defun efs/ielm-send-line-or-region ()
    (interactive)
    (unless (use-region-p)
      (forward-line 0)
      (set-mark-command nil)
      (forward-line 1))
    (backward-char 1)
    (let ((text (buffer-substring-no-properties (region-beginning)
                                                (region-end))))
      (with-current-buffer "*ielm*"
        (insert text)
        (ielm-send-input))

      (deactivate-mark)))

  (defun efs/show-ielm ()
    (interactive)
    (select-window (split-window-vertically -10))
    (ielm)
    (text-scale-set 1))

  (define-key org-mode-map (kbd "C-c C-e") 'efs/ielm-send-line-or-region)
  (define-key org-mode-map (kbd "C-c E") 'efs/show-ielm)
#+END_EXAMPLE

** [[#true-and-false][¶]]True and false
   :PROPERTIES:
   :CUSTOM_ID: true-and-false
   :END:

<<text-org18fd9f4>>
Normally a language would have a “boolean” type for expressing “true”
and “false”.

In Emacs Lisp, we have =t= and =nil= which serve the same purpose.

They are symbols!

#+BEGIN_EXAMPLE
  (type-of t)   ;; symbol
  (type-of nil) ;; symbol
#+END_EXAMPLE

These symbols are used to provide “yes” and “no” answers for expressions
in the language.

There are many “predicates” for the different types which return =t= or
=nil=, we will cover them when talking about each type.

** [[#equality][¶]]Equality
   :PROPERTIES:
   :CUSTOM_ID: equality
   :END:

<<text-org08ca4b4>>
One of the most basic operations you would do on any type is check
whether two values are the same!

There are a few ways to do that in Emacs Lisp:

- =eq= - Are the two parameters the same object?
- =eql= - Are the two parameters same object or same number?
- =equal= - Are the two parameters equivalent?
- Type-specific equality predicates

#+BEGIN_EXAMPLE
  (setq test-val '(1 2 3))

  (eq 1 1)                  ;; t
  (eq 3.1 3.1)              ;; nil
  (eq "thing" "thing")      ;; nil
  (eq '(1 2 3) '(1 2 3))    ;; nil
  (eq test-val test-val)    ;; t

  (eql 1 1)                 ;; t
  (eql 3.1 3.1)             ;; t
  (eql "thing" "thing")     ;; nil
  (eql '(1 2 3) '(1 2 3))   ;; nil
  (eql test-val test-val)   ;; t

  (equal 1 1)               ;; t
  (equal 3.1 3.1)           ;; t
  (equal "thing" "thing")   ;; t
  (equal '(1 2 3) '(1 2 3)) ;; t
  (equal test-val test-val) ;; t
#+END_EXAMPLE

A general rule is that you should use =equal= for most equality checks
or use a type-specific equality check.

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Equality-Predicates.html#Equality-Predicates][Emacs
Lisp Manual: Equality Predicates]]

** [[#numbers][¶]]Numbers
   :PROPERTIES:
   :CUSTOM_ID: numbers
   :END:

<<text-orge8d349d>>
There are two main types of numbers in Emacs Lisp:

- Integers - Whole numbers
- Floating point numbers - Numbers with a decimal

#+BEGIN_EXAMPLE
  1
  3.14159

  -1
  -3.14159

  1.
  1.0

  -0
#+END_EXAMPLE

*** [[#operations][¶]]Operations
    :PROPERTIES:
    :CUSTOM_ID: operations
    :END:

<<text-orgfdb1fe0>>
You can perform mathematical operations on these numbers:

#+BEGIN_EXAMPLE
  (+ 5 5)  ;; 10
  (- 5 5)  ;; 0
  (* 5 5)  ;; 25
  (/ 5 5)  ;; 1

  ;; Nesting arithmetic!
  (* (+ 3 2)
     (- 10 5))  ;; 25

  (% 11 5)      ;; 1 - integer remainder
  (mod 11.1 5)  ;; 1.099 - float remainder

  (1+ 5)   ;; 6
  (1- 5)   ;; 4
#+END_EXAMPLE

You can also convert between integers and floats:

- =truncate= - Rounds float to integer by moving toward zero
- =round= - Rounds to the nearest integer
- =floor= - Rounds float to integer by subtracting
- =ceiling= - Round up to the next integer

#+BEGIN_EXAMPLE
  (truncate 1.2)   ;; 1
  (truncate -1.2)  ;; -1

  (floor 1.2)      ;; 1
  (floor -1.2)     ;; -2

  (ceiling 1.2)    ;; 2
  (ceiling 1.0)    ;; 1

  (round 1.5)      ;; 2
  (round 1.4)      ;; 1
#+END_EXAMPLE

See also:

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Rounding-Operations.html#Rounding-Operations][Floating
  point rounding operations]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Bitwise-Operations.html#Bitwise-Operations][Bitwise
  operations]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#Math-Functions][Standard
  mathematical functions]]

*** [[#predicates][¶]]Predicates
    :PROPERTIES:
    :CUSTOM_ID: predicates
    :END:

<<text-org50fc266>>
These predicates will help you identify the number types in code:

#+BEGIN_EXAMPLE
  (integerp 1)     ;; t
  (integerp 1.1)   ;; nil
  (integerp "one") ;; nil

  (floatp 1)       ;; nil
  (floatp 1.1)     ;; t
  (floatp "one")   ;; nil

  (numberp 1)      ;; t
  (numberp 1.1)    ;; t
  (numberp "one")  ;; nil

  (zerop 1)        ;; nil
  (zerop 0)        ;; t
  (zerop 0.0)      ;; t
#+END_EXAMPLE

*** [[#comparisons][¶]]Comparisons
    :PROPERTIES:
    :CUSTOM_ID: comparisons
    :END:

<<text-org608d3b7>>
You can compare two numeric values (even integers against floats):

#+BEGIN_EXAMPLE
  (= 1 1)     ;; t
  (= 1 1.0)   ;; t
  (= 1 1 1
     1 1 1)   ;; t

  (< 1 2)     ;; t
  (> 1 2)     ;; nil
  (> 1 1)     ;; nil
  (> 1.2 1)   ;; nil

  (>= 1 1)     ;; t
  (<= -1 -1.0) ;; t

  (max 1 5 2 7)  ;; 7
  (min -1 3 2 4) ;; -1
#+END_EXAMPLE

** [[#characters][¶]]Characters
   :PROPERTIES:
   :CUSTOM_ID: characters
   :END:

<<text-org42f9457>>
Characters are really just integers that are interpreted as characters:

#+BEGIN_EXAMPLE
  ?A   ;; 65
  ?a   ;; 97

  ?\n  ;; 10
  ?\t  ;; 9

  ;; Unicode
  ?\N{U+E0}    ;; 224
  ?\u00e0      ;; 224
  ?\U000000E0  ;; 224
  ?\N{LATIN SMALL LETTER A WITH GRAVE} ;; 224

  ;; Control and meta char syntax
  ?\C-c        ;; 3
  (kbd "C-c")  ;; "^C"
  ?\M-x        ;; 134217848
  (kbd "M-x")  ;; [134217848]
#+END_EXAMPLE

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Type.html#Character-Type][Emacs
Lisp Manual: Character Type]]

*** [[#comparisons][¶]]Comparisons
    :PROPERTIES:
    :CUSTOM_ID: comparisons-1
    :END:

<<text-org59734b0>>
#+BEGIN_EXAMPLE
  (char-equal ?A ?A)
  (char-equal ?A 65)
  (char-equal ?A ?a)

  case-fold-search
  (setq case-fold-search nil)
  (setq case-fold-search t)
#+END_EXAMPLE

** [[#sequences][¶]]Sequences
   :PROPERTIES:
   :CUSTOM_ID: sequences
   :END:

<<text-org49eecfd>>
In Emacs Lisp, strings, lists, and arrays are all considered sequences

#+BEGIN_EXAMPLE
  (sequencep "Sequence?")     ;; t
  (sequencep "")              ;; t

  (sequencep '(1 2 3))        ;; t
  (sequencep '())             ;; t

  (sequencep [1 2 3])         ;; t
  (sequencep [])              ;; t

  (sequencep 22)              ;; nil
  (sequencep ?A)              ;; nil

  ;; What do you expect?
  (sequencep nil)
#+END_EXAMPLE

You can get the length of any sequence with =length=:

#+BEGIN_EXAMPLE
  (length "Hello!")    ;; 6
  (length '(1 2 3))    ;; 3
  (length [5 4 3 2])   ;; 4
  (length nil)         ;; 0
#+END_EXAMPLE

You can get an element of any sequence at a zero-based index with =elt=:

#+BEGIN_EXAMPLE
  (elt "Hello!" 1)   ;; ?e
  (elt "Hello!" -1)  ;; error -out of range

  (elt '(3 2 1) 2)  ;; 1
  (elt '(3 2 1) 3)  ;; nil - out of range
  (elt '(3 2 1) -1)  ;; 3
  (elt '(3 2 1) -2)  ;; 3
  (elt '(3 2 1) -6)  ;; 3 - seems to always return first element

  (elt [1 2 3 4] 2)   ;; 3
  (elt [1 2 3 4] 5)   ;; error - out of range
  (elt [1 2 3 4] -1)  ;; error - out of range
#+END_EXAMPLE

** [[#strings][¶]]Strings
   :PROPERTIES:
   :CUSTOM_ID: strings
   :END:

<<text-orgd9ec902>>
Strings are arrays of characters:

#+BEGIN_EXAMPLE
  "Hello!"

  "Hello \
   System Crafters!"

  "Hello \\ System Crafters!"

  (make-string 5 ?!)            ;; !!!!!
  (string ?H ?e ?l ?l ?o ?!)    ;; "Hello!"
#+END_EXAMPLE

*** [[#predicates][¶]]Predicates
    :PROPERTIES:
    :CUSTOM_ID: predicates-1
    :END:

<<text-orgcb77e7a>>
#+BEGIN_EXAMPLE
  (stringp "Test!")           ;; t
  (stringp 1)                 ;; nil
  (stringp nil)               ;; nil

  (string-or-null-p "Test")   ;; t
  (string-or-null-p nil)      ;; t

  (char-or-string-p ?A)       ;; t
  (char-or-string-p 65)       ;; t
  (char-or-string-p "A")      ;; t

  (arrayp "Array?")           ;; t
  (sequencep "Sequence?")     ;; t
  (listp "List?")             ;; nil
#+END_EXAMPLE

*** [[#comparisons][¶]]Comparisons
    :PROPERTIES:
    :CUSTOM_ID: comparisons-2
    :END:

<<text-org4fda3cd>>
You can compare strings for equivalence or for sorting:

- =string== or =string-equal=
- =string<= or =string-lessp=
- =string>= or =string-greaterp=

#+BEGIN_EXAMPLE
  (string= "Hello" "Hello")    ;; t
  (string= "HELLO" "Hello")    ;; nil

  (string<  "Hello" "Hello")    ;; nil
  (string<  "Mello" "Yello")    ;; t
  (string<  "Hell"  "Hello")    ;; t

  (string>  "Hello" "Hello")    ;; nil
  (string>  "Mello" "Yello")    ;; nil
  (string>  "Hell"  "Hello")    ;; nil
#+END_EXAMPLE

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#Text-Comparison][Emacs
Lisp Manual: Text Comparison]]

*** [[#operations][¶]]Operations
    :PROPERTIES:
    :CUSTOM_ID: operations-1
    :END:

<<text-org25ae5d5>>
#+BEGIN_EXAMPLE
  (substring "Hello!" 0 4)    ;; Hell
  (substring "Hello!" 1)      ;; ello!

  (concat "Hello " "System" " " "Crafters" "!")
  (concat)

  (split-string "Hello System Crafters!")
  (split-string "Hello System Crafters!" "s")
  (split-string "Hello System Crafters!" "S")

  (split-string "Hello System Crafters!" "[ !]")
  (split-string "Hello System Crafters!" "[ !]" t)

  ;; Default splitting pattern is [ \f\t\n\r\v]+

  (setq case-fold-search nil)
  (setq case-fold-search t)
#+END_EXAMPLE

*** [[#formatting][¶]]Formatting
    :PROPERTIES:
    :CUSTOM_ID: formatting
    :END:

<<text-org873870e>>
You can create a string from existing values using =format=:

#+BEGIN_EXAMPLE
  (format "Hello %d %s!" 100 "System Crafters")
  (format "Here's a list: %s" '(1 2 3))
#+END_EXAMPLE

There are many more format specifications, mainly for number
representations, consult the manual for more info:

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html#Formatting-Strings][Emacs
Lisp Manual: Formatting Strings]]

*** [[#writing-messages][¶]]Writing messages
    :PROPERTIES:
    :CUSTOM_ID: writing-messages
    :END:

<<text-orgb2049ef>>
As you've already seen, you can write messages to the echo area
(minibuffer) and =*Messages*= buffer using the =message= function:

#+BEGIN_EXAMPLE
  (message "This is %d" 5)
#+END_EXAMPLE

It uses the same formatting specifications as =format!=

** [[#lists][¶]]Lists
   :PROPERTIES:
   :CUSTOM_ID: lists
   :END:

<<text-org5ff07dd>>
The list is possibly the most useful data type in Emacs Lisp.

*** [[#cons-cells][¶]]Cons Cells
    :PROPERTIES:
    :CUSTOM_ID: cons-cells
    :END:

<<text-org5a3eb8b>>
Lists are built out of something called “cons cells”. They enable you to
chain together list elements using the “cons” container.

You can think of a “cons” like a pair or “tuple” with values that can be
accessed with =car= and =cdr=:

- =car= - Get the first value in the cons
- =cdr= - Get the second value in the cons

#+BEGIN_EXAMPLE
  (cons 1 2)  ;; '(1 . 2)
  '(1 . 2)    ;; '(1 . 2)

  (car '(1 . 2))  ;; 1
  (cdr '(1 . 2))  ;; 2

  (setq some-cons '(1 . 2))

  (setcar some-cons 3)
  some-cons              ;; '(3 . 2)

  (setcdr some-cons 4)
  some-cons              ;; '(3 . 4)
#+END_EXAMPLE

*** [[#building-lists-from-cons][¶]]Building lists from cons
    :PROPERTIES:
    :CUSTOM_ID: building-lists-from-cons
    :END:

<<text-org86ac9b8>>
There are two ways to build a list from cons cells:

#+BEGIN_EXAMPLE
  (cons 1 (cons 2 (cons 3 (cons 4 nil))))
  (cons 1 '(2 3 4))

  (cons '(1 2 3) '(4 5 6))

  (append '(1 2 3) 4)
  (append '(1 2 3) '(4))
#+END_EXAMPLE

*** [[#predicates][¶]]Predicates
    :PROPERTIES:
    :CUSTOM_ID: predicates-2
    :END:

<<text-org3f6be30>>
#+BEGIN_EXAMPLE
  (listp '(1 2 3))
  (listp 1)

  (listp nil)       ;; t
  (cons 1 nil)
  (append '(1) nil)

  (listp (cons 1 2))
  (listp (cons 1 (cons 2 (cons 3 (cons 4 nil)))))
  (consp (cons 1 (cons 2 (cons 3 (cons 4 nil)))))
#+END_EXAMPLE

*** [[#alists][¶]]Alists
    :PROPERTIES:
    :CUSTOM_ID: alists
    :END:

<<text-orgb084d18>>
Association lists (or “alists”) are lists containing cons pairs for the
purpose of storing named values:

#+BEGIN_EXAMPLE
  (setq some-alist '((one . 1)
                     (two . 2)
                     (three . 3)))

  (alist-get 'one   some-alist)  ;; 1
  (alist-get 'two   some-alist)  ;; 2
  (alist-get 'three some-alist)  ;; 3
  (alist-get 'four  some-alist)  ;; nil

  (assq 'one   some-alist)  ;; '(one . 1)
  (rassq 1     some-alist)  ;; '(one . 1)

  ;; There is no alist-set!
  (setf (alist-get 'one some-alist) 5)
  (alist-get 'one some-alist)  ;; 5
#+END_EXAMPLE

*** [[#plists][¶]]Plists
    :PROPERTIES:
    :CUSTOM_ID: plists
    :END:

<<text-orgd66fcf1>>
A property list (or “plist”) is another way to do key/value pairs with a
flat list:

#+BEGIN_EXAMPLE
  (plist-get '(one 1 two 2) 'one)
  (plist-get '(one 1 two 2) 'two)

  (plist-put '(one 1 two 2) 'three 3)
#+END_EXAMPLE

** [[#arrays][¶]]Arrays
   :PROPERTIES:
   :CUSTOM_ID: arrays
   :END:

<<text-org541b17b>>
Arrays are sequences of values that are arranged contiguously in memory.
They are much faster to access!

The most obvious form of array is a “vector”, a list with square
brackets. Strings are also arrays!

We know how to access elements in arrays, but you can set them with
=aset=:

#+BEGIN_EXAMPLE
  (setq some-array [1 2 3 4])
  (aset some-array 1 5)
  some-array

  (setq some-string "Hello!")
  (aset some-string 0 ?M)
  some-string
#+END_EXAMPLE

We can set all values in an array using =fillarray=

#+BEGIN_EXAMPLE
  (setq some-array [1 2 3])
  (fillarray some-array 6)
  some-array
#+END_EXAMPLE

** [[#logic-expressions][¶]]Logic Expressions
   :PROPERTIES:
   :CUSTOM_ID: logic-expressions
   :END:

<<text-org59504ae>>
Logic expressions allow you to combine expressions using logical
operators (=and=, =or=)

You can think of this as operations on the “truthiness” or “falsiness”
of expressions!

*** [[#what-is-true][¶]]What is true?
    :PROPERTIES:
    :CUSTOM_ID: what-is-true
    :END:

<<text-orgdbcb3a9>>
When evaluating expressions, everything except the value =nil= and the
empty list ='()= is considered =t=!

#+BEGIN_EXAMPLE
  (if t        'true 'false)  ;; true
  (if 5        'true 'false)  ;; true
  (if "Emacs"  'true 'false)  ;; true
  (if ""       'true 'false)  ;; true
  (if nil      'true 'false)  ;; false
  (if '()      'true 'false)  ;; false
#+END_EXAMPLE

*** [[#logic-operators][¶]]Logic operators
    :PROPERTIES:
    :CUSTOM_ID: logic-operators
    :END:

<<text-org3f1d7f7>>
Emacs provides the following logic operators:

- =not= - Inverts the truth value of the argument
- =and= - Returns the last value if all expressions are truthy
- =or= - Returns the first value that is truthy (short-circuits)
- =xor= - Returns the first value that is truthy (doesn't short-circuit)

#+BEGIN_EXAMPLE
  (not t)    ;; nil
  (not 3)    ;; nil
  (not nil)  ;; t

  (and t t t t 'foo)   ;; 'foo
  (and t t t 'foo t)   ;; 't
  (and 1 2 3 4 5)      ;; 5
  (and nil 'something) ;; nil

  (or  nil 'something) ;; 'something
  (or  nil 'something t) ;; 'something
  (or (- 3 3) (+ 2 0)) ;; 0
#+END_EXAMPLE

** [[#conditional-expressions][¶]]Conditional expressions
   :PROPERTIES:
   :CUSTOM_ID: conditional-expressions
   :END:

*** [[#the-codeifcode-expression][¶]]The =if= expression
    :PROPERTIES:
    :CUSTOM_ID: the-if-expression
    :END:

<<text-org9a2697e>>
As we saw before, the =if= expression evaluates an expression and based
on the result, picks one of two “branches” to evaluate next.

The “true” branch is a single expression, the “false” branch can be
multiple expressions:

#+BEGIN_EXAMPLE
  (if t 5
    ;; You can add an arbitrary number of forms in the "false" branch
    (message "Doing some extra stuff here")
    (+ 2 2))
#+END_EXAMPLE

You can use =progn= to enable multiple expressions in the “true” branch:

#+BEGIN_EXAMPLE
  (if t
    (progn
      (message "Hey, it's true!")
      5)
    ;; You can add an arbitrary number of forms in the "false" branch
    (message "Doing some extra stuff here")
    (+ 2 2))
#+END_EXAMPLE

Since this is an expression, it returns the value of the last form
evaluated inside of it:

#+BEGIN_EXAMPLE
  (if t 5
    (message "Doing some extra stuff here")
    (+ 2 2))

  (if nil 5
    (message "Doing some extra stuff here")
    (+ 2 2))
#+END_EXAMPLE

You can use =if= expressions inline when setting variables:

#+BEGIN_EXAMPLE
  (setq tab-width (if (string-equal (format-time-string "%A")
                                    "Monday")
                      3
                      2))
#+END_EXAMPLE

*** [[#the-codewhencode-and-codeunlesscode-expressions][¶]]The =when=
and =unless= expressions
    :PROPERTIES:
    :CUSTOM_ID: the-when-and-unless-expressions
    :END:

<<text-orgadb477f>>
These expressions are useful for evaluating forms when a particular
condition is true or false:

- =when= - Evaluate the following forms when the expression evaluates to
  =t=
- =unless= - Evaluate the following forms when the expression evaluates
  to =nil=

#+BEGIN_EXAMPLE
  (when (> 2 1) 'foo)    ;; 'foo
  (unless (> 2 1) 'foo)  ;; nil

  (when (> 1 2) 'foo)    ;; nil
  (unless (> 1 2) 'foo)  ;; 'foo
#+END_EXAMPLE

Both of these expressions can contain multiple forms and return the
result of the last form:

#+BEGIN_EXAMPLE
  (when (> 2 1)
    (message "Hey, it's true!")
    (- 5 2)
    (+ 2 2)) ;; 4

  (unless (> 1 2)
    (message "Hey, it's true!")
    (- 5 2)
    (+ 2 2)) ;; 4
#+END_EXAMPLE

*** [[#the-codecondcode-expression][¶]]The =cond= expression
    :PROPERTIES:
    :CUSTOM_ID: the-cond-expression
    :END:

<<text-orgcd19f2f>>
The =cond= expression enables you to concisely list multiple conditions
to check with resulting forms to execute:

#+BEGIN_EXAMPLE
  (setq a 1)
  (setq a 2)
  (setq a -1)

  (cond ((eql a 1) "Equal to 1")
        ((> a 1)   "Greater than 1")
        (t         "Something else!"))
#+END_EXAMPLE

*** [[#the-codepcasecode-expression][¶]]The =pcase= expression
    :PROPERTIES:
    :CUSTOM_ID: the-pcase-expression
    :END:

<<text-org6ab6abf>>
This one is powerful! We will cover it in a future episode.

** [[#loops][¶]]Loops
   :PROPERTIES:
   :CUSTOM_ID: loops
   :END:

<<text-org3d72e50>>
There are 4 ways to loop in Emacs Lisp:

*** [[#while][¶]]while
    :PROPERTIES:
    :CUSTOM_ID: while
    :END:

<<text-orgcb1fc4d>>
Loops until the condition expression returns false:

#+BEGIN_EXAMPLE
  (setq my-loop-counter 0)

  (while (< my-loop-counter 5)
    (message "I'm looping! %d" my-loop-counter)
    (setq my-loop-counter (1+ my-loop-counter)))
#+END_EXAMPLE

*** [[#dotimes][¶]]dotimes
    :PROPERTIES:
    :CUSTOM_ID: dotimes
    :END:

<<text-orgc7800e8>>
#+BEGIN_EXAMPLE
  (dotimes (count 5)
    (message "I'm looping more easily! %d" count))
#+END_EXAMPLE

*** [[#dolist][¶]]dolist
    :PROPERTIES:
    :CUSTOM_ID: dolist
    :END:

<<text-orgce5f000>>
Loops for each item in a list:

#+BEGIN_EXAMPLE
  (dolist (item '("one" "two" "three" "four" "five"))
    (message "Item %s" item))
#+END_EXAMPLE

*** [[#recursion][¶]]Recursion
    :PROPERTIES:
    :CUSTOM_ID: recursion
    :END:

<<text-org2298e9d>>
Can be fun and interesting, but not safe for a loop that will have many
cycles:

#+BEGIN_EXAMPLE
  (defun efs/recursion-test (counter limit)
    (when (< counter limit)
      (message "I'm looping via recursion! %d" counter)
      (efs/recursion-test (1+ counter) limit)))

  (efs/recursion-test 0 5)
#+END_EXAMPLE

** [[#whatrsquos-next][¶]]What's next?
   :PROPERTIES:
   :CUSTOM_ID: whats-next
   :END:

<<text-org8f5635f>>

- Dive into functions!
- Shorter side videos on =pcase=, regular expressions

#+ATTR_HTML: :class list-form
#+BEGIN_center

Subscribe to the System Crafters Newsletter!

Stay up to date with the latest System Crafters news and updates! Read
the [[/newsletter/][Newsletter]] page for more information.

#+ATTR_HTML: :class row list-form-label
#+BEGIN_center
Name (optional)
#+END_center

#+ATTR_HTML: :class row list-form-label
#+BEGIN_center
Email Address
#+END_center

#+END_center

[[/privacy-policy/][Privacy Policy]] · [[/credits/][Credits]] ·
[[/rss/][RSS Feeds]] · [[https://fosstodon.org/@daviwil][Fediverse]]

© 2021-2024 · System Crafters LLC

[[https://codeberg.org/SystemCrafters/systemcrafters.net][[[/img/codeberg.png]]]]
